#!/usr/bin/python

# Careful, docopt is picky about spacing, esp. that there be only 1 space
# btw. the short and long forms of an option.
"""
Make a brain mask for diffusion MRI (dMRI) data.

Usage:
  extract_dmri_brain [-b=BT -c=CR -d=D -f=HF -i=FL -m=MR -n=NM -p=PCT -t=BRFN --verbose=VE -s=SVC -w] <ecfn> <bvals> <tivfn>
  extract_dmri_brain (-h|--help|--version)

Arguments:
  ecfn:    Filename of an eddy corrected 4D dMRI nii.
  bvals:   Name of an ASCII file holding the diffusion strengths in a single
           space separated row.
  tivfn:   Filename for a TIV-style type output nii.

Options:
  -h --help               Show this message and exit.
  --version               Show version and exit.
  -b BT --bt=BT           Cutoff between "diffused" and "nondiffused" b values.
                          [default: 700]
  -c CR --cr=CR           Closing radius relative to the maximum voxel size
                          with which to close the mask before filling holes.
                          [default: 3.7]
  -d D --dil=D            Controls dilation.  
                          If a positive number, it will be used as the radius,
                          relative to the maximum voxel size, to dilate with.
                          If a nonnegative number, no dilation will be done.
                          If y or t (case insensitive), mr * nmed will be
                          used.
                          [default: 0.5]
  -f HF --hf=HF           Whether or not to fill holes.
                          [default: 1] (True)
  -i FL --isFL=FL         Specify whether it is (1) or is not (0) a FLAIR
                          diffusion scan.  It defaults to trying to find that
                          from the InversionTime (if available) and the CSF
                          to tissue brightness ratio.
  -m MR --mr=MR           Radius of the median filter relative to the largest
                          voxel size.
                          [default: 1]
  -n NM --nmed=NM         Number of times to run the median filter
                          [default: 2]
  -p PCT --pct=PCT        The mask will be based on this percentile of the
                          diffusion volumes.
                          [default: 75]
  -s SVC --svc=SVC        Pickle file for the support vector classifier.
                          (Not used for FLAIR.)
                          [default: RFC_classifier.pickle]
  -t BRFN --brfn=BRFN     If given, also write a tighter brain mask to BRFN.
  --verbose=VE            Be chatty.
                          [default: 1] (True)
  -w --whiskers           If given, do NOT make an extra effort to trim whiskers.
"""

from dipy.io import read_bvals_bvecs
from docopt import docopt
import nibabel as nib
import os
import sys

from dmri_brain_extractor import extract_dmri_brain

# Please use semantic versioning (API.feature.bugfix), http://semver.org/
args = docopt(__doc__, version='1.0.0')

try:
    ecnii = nib.load(args['<ecfn>'])
    bvals, junk = read_bvals_bvecs(args['<bvals>'], None)
    
    try:
        dilation = float(args['--dil'])
        if not dilation > 0:
            dilation = False
    except:  # Not a number
        if args['--dil'][0].lower() in 'ty':
            dilation = True
        else:
            dilation = False

    isFLAIR = None
    if args['--isFL'] is not None:
        try:
            isFLAIR = bool(int(args['--isFL']))
        except:
            raise ValueError('Use 0 (False) or 1 (True) when using the --isFL option')
        
    mask = extract_dmri_brain(ecnii.get_data(), ecnii, args['<tivfn>'],
                              bvals, bthresh=float(args['--bt']),
                              holefill=args['--hf'],
                              percentage=float(args['--pct']),
                              medrad=float(args['--mr']),
                              nmed=int(args['--nmed']),
                              verbose=args['--verbose'], dilate=dilation,
                              closerad=float(args['--cr']),
                              brfn=args.get('--brfn'), isFLAIR=isFLAIR,
                              svc=args['--svc'], trim_whiskers=not args.get('--whiskers'))
except Exception, e:
    if args['--verbose']:
        # Print the traceback
        import traceback
        
        traceback.print_exception(*(sys.exc_info()))
    else:
        # Don't print the traceback, because it tends to distract novices from
        # the error message you want them to read.
        print >>sys.stderr, e
    sys.exit(1)

sys.exit(0)
                                
